!!!) Виртуально окружение 

1) Создайте директорию, в которой будет находиться проект и
виртуальное окружение(Используется команда "python −m venv" и
название директории, в которой будет создано виртуальное
окружение.):
mkdir название_проекта
cd название_проекта
python -m venv название_окружения
2) Для активации окружения запустите скрипт activate.bat внутри директории с
виртуальным окружением.
\название_проекта\название_окружения\Scripts\activate.bat
2*) По окончанию работы запуститe скрипт deactivate.bat.
\название_проекта\название_окружения\Scripts\deactivate.bat



3)После этого 
Создайте файл requirements.txt и поместитe в него строку Django==2.2.
Активируйте виртуальное окружение и установите зависимости из requirements.txt
pip install -r requirements.txt

// это установится из pip install -r requirements.txt
----) Установка Django ==2.2 (если не установлен)
	pip install Django==2.2
//


4) todo это папка с названием папки нашего дажнго
	django-admin startproject todo
5) Тепреь созаддим проект с именем (task)
	django-admin startapp task
6) теперь сделаем миграцию наших данных в БД
	puthon manage.py migrate



7) Созадание суперюзера(адина)
	python manage.py createsuperuser

// Для запуска через cmd	
	python manage.py runserver


ВАЖНО!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!=================

Если нужно переждать value  в форму HTML
надои сопльзовать initial= {'key' : 'value'} , Где key -это name='title' -название поля где созадшеь форму
 form = WriteDreamForm(initial={'title': 'TEST'})
  ..... value='TEST'


ВАЖНО!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!=================


Сама структура выглядит так Название папки ГДЕ ДЖАНГО там фаил manage.py и db.sqlite3 (БД)
потом идет 2 папки:
1 папка например news-> там находятся файлы .py:
__init__
setting
urls
wsgi
2 папка например app_news-> там находятся файлы:
migrations (папка где миграции )
tempaltes(шаблоны html )
__init__.py
admin.py - тут мы создаем модели в админки
models.py - тут мы созадем как в БД будут хранитсья данные
forms.py - тут модель формы ( типа регистрация или какие либо данные, так же там можно делать проверки введеных данных ну и просто свзяь между БД и выводом на html
urls.py - тут все пути страницы (котоыре сюда перенаправили из главного urls.py)
view.py - тут самая магия- тут пишем представления, которые уже будут выводить наши переменные в html )


======================================================================================

Теперь как из Pycharm работать с джанго!
1) Открыть setting (вверху справа)
2) убедиться что стоит cmd - в Tools - Terminal  - В Application Setting : Shell path - выбрать путь к cmd
Далее в Project Setting:
Start directory: Выберите текущий проект (он с него будет загружать сразу путь cmd ) - удобно
3) Launguages Frameworks - Django 
Установит галочку Enable Django Support
Django project root - указать к папке основного проекте (где лежит setting.py)
Setting: -  путь к этоу файлу по факту будет ИМЯ_ПАПКИ/setting.py
Manage script - manage.py  это написать

Теперь что бы было можно нажимать RUN и сразу запускался runserver

Вверху от треугольника зеленго ( там формы нажать и выбрать там Edit COnfigurations)
В открывшемся окне слева нажать +
Выбрать там Django server
В поле Name : НАписать имя которое будет отображатсья дял удобства запуска
Поставить галочку Run browser :  и там адрес котоырй будет запускатьсбя

И обезательно в Environment variables:  PYTHONUNBUFFERED=1;DJANGO_SETTINGS_MODULE=news.settings    указать путь к setting в основном это папка типа тут news - в зависимости от проекта может меняться


======================================================================================






-----------------------------------------------------------------------------------------------------------
// Далее в setting.py

INSTALLED_APPS = [
	'app_news',
	'Название папки где наш проект app_news',
	// далее куча джанговских//
]

/Тут при каждмо посещении сайта будет вызываться функция которую мы добавим
например функция LogginsMiddleware, - которая допустим находиться в папке с названием board->middleware->logging_middleware.py и там класс  LogginsMiddleware

 и там например из-за __call__ (при вызове этйо функции) типа проверяет IP с котрого взывали

    def __call__(self, request):
        allow_ips = ["127.0.0.1"]
        ip = request.META.get('REMOTE_ADDR')
        if ip not in allow_ips:
            raise PermissionDenied
        response = self.get_response(request)


MIDDLEWARE = [
	'board.middleware.logging_middleware.LogginsMiddleware',
]

Тут база данных

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


ROOT_URLCONF = 'news.urls'  это типа название папки и ссылка основго фалйа urls



-----------------------------------------------------------------------------------------------------------
ИЗ основного меню
URLS.py

 path('', include('advertisements.urls')), - это означате по адресу ''(по факту главное меню) мы делаем перенаправление на папку  advertisements и в ней файл urls.py , где заного уже прпоисаны пути страниц нужные
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('advertisements.urls')),
]


-----------------------------------------------------------------------------------------------------------

apps.py я так понял туту прописать что бы папка была как бы рабочей пример
from django.apps import AppConfig


class AppNewsConfig(AppConfig):
    name = 'app_news'

папка app_news - там все основное
 

-----------------------------------------------------------------------------------------------------------

-==========================================СТАНДАРТНО================================================
from django.contrib.auth import authenticate, login, logout
from django.http import HttpResponseRedirect, HttpResponse
Для вьюшек использование

стандартный логаут)
def logout_view(request):
    logout(request)
    return HttpResponseRedirect(reverse('index'))

   для моделей что бы расширить данные юзера
from django.contrib.auth.models import User
         в модели
   user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name=_('Пользователь'))

   в форме
   class MyUserRegister(UserCreationForm):


-----------------------------------------------------------------------------------------------------------
Папка tempaltes  - туда создавать наши html странички (html)



ЗАПРОСЫ В БД для улучшения(убыстрения)

   #Запрос если там есть ключ ForeignKey ( select_related) или если ManyToManyField(prefetch_related)
        # Так же если нужно например что бы запросить 1 поля из БД а не все подряд используется .only('name'),
        # если нужно что бы еще при этом было еще какое то значение из связаной бд то через __ например blog__name (в ключе blog будет запрашиватсья только имя)
        # Пример
        # post= Post.objects.select_related('blog').only('title', 'blog__name')



========================================ЛОКАЛИЗАЦИЯ ====================================================================
Что бы работала ЛОКАЛИЗАЦИЯ - НАСТРЙОКА:

добавить в
MIDDLEWARE = [
    #Чтобы работал перевод языка
    'django.middleware.locale.LocaleMiddleware',

# стандартно RU
LANGUAGE_CODE = 'ru'

TIME_ZONE = 'W-SU'

USE_I18N = True

USE_L10N = True

USE_TZ = True


LANGUAGES = [
    ('ru', 'Русский'),
    ('en', 'English'),
]

#где храниться папка с переводом
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

# сюда добавить эту строчку)
urlpatterns = [
    #ЧТо бы работала локализация
    path('i18n', include('django.conf.urls.i18n')),

потом сделать команду python manage.py makemessages -l en
- появится фаил и там сделать перевод и потом напистаь команду
python manage.py compilemessages

В HTML коде
  <form class="launge-form" action="{% url 'set_language' %}" method="post">
        {% csrf_token %}
    <input name="next" type="hidden" value="{{ redirect_to }}">
    <select name="language" class="launge">
        {% get_current_language as LANGUAGE_CODE %}
        {% get_available_languages as LANGUAGES %}
        {% get_language_info_list for LANGUAGES as languages %}
        {% for language in languages %}
        <option value="{{ language.code }}" {% if language.code == LANGUAGE_CODE %} selected {% endif %} >
            {{ language.name_local }} ({{ language.code }})
        </option>
                {% endfor %}
    </select>
</form>


JS - это чтобы небыло кнпоки, а сразу отправлялалсь форма

let forms = document.querySelector('.launge-form')

    forms.addEventListener('change', function (){
                  forms.submit()
  })


В файлах нуэжно добавить библиотеку
from django.utils.translation import gettext as _

А в моделях и админке
from django.utils.translation import gettext_lazy as _

=======================================================================================================================

======================================КЭШИРОВАНИЕ=============================================================
Добавить сюда

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # Кеширование всех страниц - если надо
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    #Кэширование
    'django.middleware.cache.FetchFromCacheMiddleware',


Если кешировать полночстью шаблон
from django.views.decorators.cache import cache_page
в секнуднах
 path('shops', cache_page(60*60*24*5)(ShopsView.as_view()), name='shops_list'),


from django.core.cache import cache

ПРИМЕР:

#Кеширование только этого
        # promotions = Promotions.objects.all()
        # promotions_cache_key = 'promotions: {}'.format(user_y.username)
        # cache.get_or_set(promotions_cache_key, promotions, 60*60*24)

        #Массово кеширование
        #Созадидм ключ для хеширования
        promotions_cache_key = 'promotions: {}'.format(user_y.id)
        offers_cahe_key = 'offers:{}'.format(user_y.id)

        #Елси кеш пустой на промоакции, то азпишем туда из БД иначе заберем из хеша
        if not cache.get(promotions_cache_key):
            promotions = Promotions.objects.all()
            cache.set(promotions_cache_key, promotions, 60)
        else:
            promotions = cache.get(promotions_cache_key)

        # Елси кеш пустой на акции, то запишем туда из БД иначе заберем из хеша
        if not cache.get(offers_cahe_key):
            stock = Stock.objects.all()
            cache.set(offers_cahe_key, stock, 60)
        else:
            stock = cache.get(offers_cahe_key)

        #теперь првоерим ключи если ключа нет, то запросим из БД и запишем туда
        #тут способо если все в 1 большой словарь
        # if not cache.get_many([promotions_cache_key, offers_cahe_key]):
        #     promotions = Promotions.objects.all()
        #     stock = Stock.objects.all()
        #     user_account_cache_data = {
        #         promotions_cache_key: promotions,
        #         offers_cahe_key: stock,
        #     }
        #     cache.set_many(user_account_cache_data)
        # else:
        #     promotions = cache.get(promotions_cache_key)
        #     stock = cache.get(offers_cahe_key)


======================================================документирование=-===============================================


Добавить в сюда ( обезательно что бы был      'django.contrib.staticfiles',)
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #для документирования в админ панели
    'django.contrib.admindocs',


в главный


urlpatterns = [
    #Важно что бы это было первое
    path('admin/doc/', include('django.contrib.admindocs.urls')),


    далее в вфайлах

    from django.utils.translation import gettext_lazy as _

 ================================================== КАРТА САЙТА==================================================

 добавить в

 INSTALLED_APPS = [

    #Для добавления карты сайта
    'django.contrib.sitemaps',
    'django.contrib.sites',

в setting обезателньо еще написать
SITE_ID = 1

далее сделать миграцию python manage.py migrate


добавим файл в проект sitemap.py
и там
===========================
from django.contrib.sitemaps import Sitemap
from .models import News


class NewsSiteMap(Sitemap):
    changefreq = 'weekly'
    priority = 0.9

    def items(self):
        return News.objects.filter(is_published=True).all()

    def lastmod(self, obj: News):
        return obj.created_at

======================================

models.py в

в нужной модели сделать

 #Для карты сайта нужно
    def get_absolute_url(self):
        return reverse('news-detail', args=[str(self.pk)])
==================

В главный url добавить

from django.contrib.sitemaps.views import sitemap
from app_sale_home.sitemap import NewsSiteMap

# сюда добавить все что хотим в карту
sitemaps = {
    'news': NewsSiteMap
}

urlpatterns = [
    #Для карты сайта
    path('sitemap.xml', sitemap, {'sitemaps': sitemaps}, name='django.contrib.sitemaps.views.sitemap'),


*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Sitemap для статических представлений¶
Часто требуется, чтобы поисковые машины индексировали представления, которые не являются ни страницами детализации объекта, ни плоскими страницами. Решение состоит в том, чтобы явно перечислить имена URL для этих представлений в items и вызвать reverse() в методе location карты сайта. Например:

# sitemaps.py
from django.contrib import sitemaps
from django.urls import reverse

class StaticViewSitemap(sitemaps.Sitemap):
    priority = 0.5
    changefreq = 'daily'

    def items(self):
        return ['main', 'about', 'license']

    def location(self, item):
        return reverse(item)

# urls.py
from django.contrib.sitemaps.views import sitemap
from django.urls import path

from .sitemaps import StaticViewSitemap
from . import views

sitemaps = {
    'static': StaticViewSitemap,
}

urlpatterns = [
    path('', views.main, name='main'),
    path('about/', views.about, name='about'),
    path('license/', views.license, name='license'),
    # ...
    path('sitemap.xml', sitemap, {'sitemaps': sitemaps},
         name='django.contrib.sitemaps.views.sitemap')
]
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


 ======================================== РЕСТ АПИ ==================================================

 ИНСТРУКЦИЯ по установке и настройке на сайте
 https://www.django-rest-framework.org/#installation

from drf_yasg.views import get_schema_view
from drf_yasg import openapi


 Пример работы  у меня в web_shops -> rest

 ===========================================================================================================


 Критически важные настройки файла settings.py:

DEBUG. При развёртывании сайта должен быть установлен в False (DEBUG = False). Тем самым, прекратится вывод  важной отладочной информации.
SECRET_KEY. Это большое случайное число, применяемое для защиты от CRSF. Важно, чтобы ключ, используемый в продакшене, не указывался в исходном коде, и/или не запрашивался с другого сервера. Django рекомендует размещать значение ключа либо в переменной окружения, или в файле с доступом только на чтение.
# Чтение SECRET_KEY из переменной окружения
import os
SECRET_KEY = os.environ['SECRET_KEY']

#ИЛИ

#Чтение ключа из файла
with open('/etc/secret_key.txt') as f:
    SECRET_KEY = f.read().strip()
Давайте изменим приложение LocalLibrary таким образом, чтобы читать SECRET_KEY и DEBUG из переменных окружения, если те определены, иначе использовать значения по умолчанию.

Откройте /locallibrary/settings.py, закомментируйте исходное значение SECRET_KEY и добавьте новые строки, как указано ниже жирным. В течении разработки, никаких переменных окружения определено не было, таким образом будут использоваться значения по умолчанию (не имеет значения какой ключ вы используете в процессе разработки, поскольку при развёртывании проекта вы будете использовать другой).

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'cg#p$g+j9tax!#a3cup@1$8obt2_+&k3q+pmu)5%asj6yjpkag'
import os
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'cg#p$g+j9tax!#a3cup@1$8obt2_+&k3q+pmu)5%asj6yjpkag')
Copy to Clipboard
Затем закомментируйте строку с настройкой DEBUG, а затем, добавьте новую, указанную ниже.

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool( os.environ.get('DJANGO_DEBUG', True) )
Copy to Clipboard
Значение DEBUG будет True по умолчанию и станет False, в том случае, если переменная окружения DJANGO_DEBUG будет проинициализирована пустой строкой, то есть, DJANGO_DEBUG=''


==================================================================================================================

Для создания виртуального окружения выполните команду:

/opt/python/python-3.7.6/bin/python -m venv djangoenv

Где:

python-3.7.6 — ваша версия Python,

djangoenv — название вашего виртуального окружения.

7.
Активируйте ваше виртуальное окружение с помощью команды:

source djangoenv/bin/activate

Где djangoenv — название вашего виртуального окружения.

u1581954_sergey - имя пользователя
u1581954_u1581954 - имя базы данных